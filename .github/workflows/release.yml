# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ========================================
  # Validate Release
  # ========================================
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      version_type: ${{ steps.version.outputs.version_type }}

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐹 Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod' # <-- REFINEMENT 1
        cache: true

    - name: 🔧 Install Tools
      run: make install-tools

    - name: 🏷️ Extract & Validate Version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Validate version format
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-dev.1"
          exit 1
        fi
        
        # Determine release type
        if [[ $VERSION == *"-dev."* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "version_type=development" >> $GITHUB_OUTPUT
        elif [[ $VERSION == *"-"* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "version_type=prerelease" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "version_type=stable" >> $GITHUB_OUTPUT
        fi

    - name: ✅ Run Release Quality Gate
      run: make check-release

    - name: 🔍 Final Replace Check
      run: make check-replace-strict

  # ========================================
  # Create GitHub Release
  # ========================================
  release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Generate Changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        VERSION_TYPE="${{ needs.validate.outputs.version_type }}"
        
        # Find previous stable version for a more accurate changelog
        PREVIOUS=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | grep -v "$VERSION" | head -n1) # <-- REFINEMENT 2
        
        # Create changelog
        {
          case "$VERSION_TYPE" in
            "development") echo "## 🧪 Development Release $VERSION" ;;
            "prerelease") echo "## 🚧 Pre-release $VERSION" ;;
            "stable") echo "## 🎉 Release $VERSION" ;;
          esac
          
          echo ""
          
          if [ -n "$PREVIOUS" ]; then
            echo "### 📋 Changes since $PREVIOUS"
            COMMIT_COUNT=$(git rev-list --count "$PREVIOUS..$VERSION")
            echo ""
            git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" "$PREVIOUS..$VERSION" | head -20
            if [ "$COMMIT_COUNT" -gt 20 ]; then
              echo ""
              echo "... and $((COMMIT_COUNT - 20)) more commits."
            fi
            echo ""
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS...$VERSION"
          else
            echo "### 🎊 Initial Release"
          fi
          
          echo -e "\n---\n\n### 📦 Installation\n\n\`\`\`bash\ngo get github.com/${{ github.repository }}@$VERSION\n\`\`\`"
          
        } > changelog.md
        
        echo "Generated changelog:"
        cat changelog.md

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: |
          ${{ 
            needs.validate.outputs.version_type == 'development' && format('🧪 Development {0}', needs.validate.outputs.version) ||
            needs.validate.outputs.version_type == 'prerelease' && format('🚧 Pre-release {0}', needs.validate.outputs.version) ||
            format('🎉 Release {0}', needs.validate.outputs.version)
          }}
        body_path: changelog.md
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease }}
        make_latest: ${{ needs.validate.outputs.is_prerelease == 'false' }}